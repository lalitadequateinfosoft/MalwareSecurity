using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Threading;
using MalwareSecurity.AppPages;
using MalwareSecurity.Enum;

namespace MalwareSecurity.AppWindow
{
    /// <summary>
    /// Interaction logic for DashBoard.xaml
    /// </summary>
    public partial class DashBoard : Window
    {
        BrushConverter bc;
        private static int Active = 0;
        private static int activeGrid = 0;
        private static int Threats = 0;
        BackgroundWorker worker;
        public DashBoard()
        {
            bc = new BrushConverter();
            InitializeComponent();
            frame.Navigate(new System.Uri("AppPages/about.xaml",
             UriKind.RelativeOrAbsolute));
        }

        private void OtherToolsGrid_MouseEnter(object sender, MouseEventArgs e)
        {
            SettingsPopUp.IsOpen = false;
            SettingsGrid.Background = Brushes.Gray;
            ReportsPopUp.IsOpen = false;
            ReportsGrid.Background = Brushes.Gray;
            OtherToolsPopUp.IsOpen = true;
            OtherToolsGrid.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void OtherToolsGrid_MouseLeave(object sender, MouseEventArgs e)
        {
            OtherToolsPopUp.IsOpen = false;
            OtherToolsGrid.Background = Brushes.Gray;

        }

        private void SettingsGrid_MouseEnter(object sender, MouseEventArgs e)
        {
            OtherToolsPopUp.IsOpen = false;
            OtherToolsGrid.Background = Brushes.Gray;
            ReportsPopUp.IsOpen = false;
            ReportsGrid.Background = Brushes.Gray;
            SettingsPopUp.IsOpen = true;
            SettingsGrid.Background = (Brush)bc.ConvertFrom("#0d447a");

        }
        private void SettingsGrid_MouseLeave(object sender, MouseEventArgs e)
        {
            SettingsPopUp.IsOpen = false;
            SettingsGrid.Background = Brushes.Gray;
        }
        private void ReportsGrid_MouseEnter(object sender, MouseEventArgs e)
        {
            ReportsPopUp.IsOpen = true;
            ReportsGrid.Background = (Brush)bc.ConvertFrom("#0d447a");
            SettingsPopUp.IsOpen = false;
            SettingsGrid.Background = Brushes.Gray;
            OtherToolsPopUp.IsOpen = false;
            OtherToolsGrid.Background = Brushes.Gray;
        }
        private void ReportsGrid_MouseLeave(object sender, MouseEventArgs e)
        {
            ReportsPopUp.IsOpen = false;
            ReportsGrid.Background = Brushes.Gray;
        }

        private void HelpGrid_MouseEnter(object sender, MouseEventArgs e)
        {
            ReportsPopUp.IsOpen = false;
            ReportsGrid.Background = Brushes.Gray;
            HelpGrid.Background = (Brush)bc.ConvertFrom("#0d447a"); ;
            ScanDetailsGrid.Background = Brushes.Gray;
        }
        private void HelpGrid_MouseLeave(object sender, MouseEventArgs e)
        {
            HelpGrid.Background = Brushes.Gray;

        }

        private void HelpGrid_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            HelpGrid.Background = (Brush)bc.ConvertFrom("#0d447a");
            activeGrid = (int)ActiveGrid.Help;
            frame.Navigate(new Help());
        }

        private void ScanDetailsGrid_MouseEnter(object sender, MouseEventArgs e)
        {
            ScanDetailsGrid.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void ScanDetailsGrid_MouseLeave(object sender, MouseEventArgs e)
        {

            ScanDetailsGrid.Background = Brushes.Gray;
        }

        private void ScanDetailsGrid_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            activeGrid = (int)ActiveGrid.ScanDetails;
            ScanDetailsGrid.Background = (Brush)bc.ConvertFrom("#0d447a");
            frame.Navigate(new ScanDetails());
        }
        private void scan_Click(object sender, RoutedEventArgs e)
        {
            scan.Visibility = Visibility.Hidden;
            Stopscan.Visibility = Visibility.Visible;
            ThankyouGrid.Visibility = Visibility.Hidden;
            ResultGrid.Visibility = Visibility.Hidden;
            ScanGrid.Visibility = Visibility.Visible;
            donategrid.Visibility = Visibility.Visible;
            Donate.Visibility = Visibility.Hidden;
            Progressbarbbtn.Visibility = Visibility.Visible;

            worker = new BackgroundWorker();
            worker.WorkerReportsProgress = true;
            worker.DoWork += worker_DoWork;
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);
            worker.ProgressChanged += worker_ProgressChanged;
            worker.WorkerSupportsCancellation = true;
            worker.RunWorkerAsync();
            Active = 1;
        }
        private void scanMemory_click(object sender, EventArgs e)
        {
            ScanHeaderMessage.Text = "Scanning Memory";
            worker = new BackgroundWorker();
            worker.WorkerReportsProgress = true;
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);
            worker.DoWork += worker_DoWork;
            worker.ProgressChanged += worker_MemoryScanProgressChanged;
            worker.WorkerSupportsCancellation = true;
            worker.RunWorkerAsync();
        }

        void worker_MemoryScanProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            ProgressPercentage.Text = e.ProgressPercentage + "%";
            Progressbarbbtn.Value = e.ProgressPercentage;
            ScanFooter.Text = e.ProgressPercentage + " objects scanned, " + Convert.ToInt32(e.ProgressPercentage / 20) + " threat found.";

            if (e.ProgressPercentage == 100)
            {
                Threats = Threats + Convert.ToInt32(e.ProgressPercentage / 20);
                scanStartup_click(sender, e);
            }
        }
        private void scanStartup_click(object sender, EventArgs e)
        {
            ScanHeaderMessage.Text = "Scanning startup items..";
            worker = new BackgroundWorker();
            worker.WorkerReportsProgress = true;
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);
            worker.DoWork += worker_DoWork;
            worker.ProgressChanged += worker_StartupScanProgressChanged;
            worker.WorkerSupportsCancellation = true;
            worker.RunWorkerAsync();

            Active = 1;
        }

        void worker_StartupScanProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            ProgressPercentage.Text = e.ProgressPercentage + "%";
            Progressbarbbtn.Value = e.ProgressPercentage;
            ScanFooter.Text = e.ProgressPercentage + " objects scanned, " + Convert.ToInt32(e.ProgressPercentage / 22) + " threat found.";

            if (e.ProgressPercentage == 100)
            {
                Threats = Threats + Convert.ToInt32(e.ProgressPercentage / 22);
                scanRegistry_click(sender, e);
            }
        }

        private void scanRegistry_click(object sender, EventArgs e)
        {
            ScanHeaderMessage.Text = "Scanning registry..";
            worker = new BackgroundWorker();
            worker.WorkerReportsProgress = true;
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);
            worker.DoWork += worker_DoWork;
            worker.ProgressChanged += worker_registryScanProgressChanged;
            worker.WorkerSupportsCancellation = true;
            worker.RunWorkerAsync();
        }


        void worker_registryScanProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            ProgressPercentage.Text = e.ProgressPercentage + "%";
            Progressbarbbtn.Value = e.ProgressPercentage;
            ScanFooter.Text = e.ProgressPercentage + " objects scanned, " + Convert.ToInt32(e.ProgressPercentage / 23) + " threat found.";

            if (e.ProgressPercentage == 100)
            {
                Threats = Threats + Convert.ToInt32(e.ProgressPercentage / 23);
                scanFile_click(sender, e);
            }
        }
        private void scanFile_click(object sender, EventArgs e)
        {
            ScanHeaderMessage.Text = "Scanning file system..";
            worker = new BackgroundWorker();
            worker.WorkerReportsProgress = true;
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);
            worker.DoWork += worker_DoWork;
            worker.ProgressChanged += worker_fileSystemScanProgressChanged;
            worker.WorkerSupportsCancellation = true;
            worker.RunWorkerAsync();
        }


        void worker_fileSystemScanProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            ProgressPercentage.Text = e.ProgressPercentage + "%";
            Progressbarbbtn.Value = e.ProgressPercentage;
            ScanFooter.Text = e.ProgressPercentage + " objects scanned, " + Convert.ToInt32(e.ProgressPercentage / 27) + " threat found.";

            if (e.ProgressPercentage == 100)
            {
                Threats = Threats + Convert.ToInt32(e.ProgressPercentage / 27);
                finalResult(sender, e);
            }
        }
        private void finalResult(object sender, EventArgs e)
        {
            Stopscan.Visibility = Visibility.Hidden;
            StartOver.Visibility = Visibility.Visible;
            ScanHeaderMessage.Text = "Checking for updates...";
            donategrid.Visibility = Visibility.Hidden;
            ScanGrid.Visibility = Visibility.Hidden;
            ResultGrid.Visibility = Visibility.Visible;
            ThreatsCount.Text = "  " + Threats;
            Threats = 0;
        }
        private void Stopscan_Click(object sender, RoutedEventArgs e)
        {
            scan.Visibility = Visibility.Visible;
            Stopscan.Visibility = Visibility.Hidden;
            ThankyouGrid.Visibility = Visibility.Visible;
            ScanGrid.Visibility = Visibility.Hidden;
            Donate.Visibility = Visibility.Visible;
            Progressbarbbtn.Visibility = Visibility.Hidden;
            ScanFooter.Text = "";
            ScanHeaderMessage.Text = "Checking for updates...";
            Active = 0;
            worker.CancelAsync();
            ScanNormalizer(sender, e);
        }
        private void StartOver_Click(object sender, RoutedEventArgs e)
        {
            scan.Visibility = Visibility.Hidden;
            StartOver.Visibility = Visibility.Hidden;
            Stopscan.Visibility = Visibility.Visible;
            ThankyouGrid.Visibility = Visibility.Hidden;
            ResultGrid.Visibility = Visibility.Hidden;
            ScanGrid.Visibility = Visibility.Visible;
            donategrid.Visibility = Visibility.Visible;
            Donate.Visibility = Visibility.Hidden;
            Progressbarbbtn.Visibility = Visibility.Visible;

            Active = 1;

            worker = new BackgroundWorker();
            worker.WorkerReportsProgress = true;
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);
            worker.DoWork += worker_DoWork;
            worker.ProgressChanged += worker_ProgressChanged;
            worker.WorkerSupportsCancellation = true;
            worker.RunWorkerAsync();
        }

        void worker_DoWork(object sender, DoWorkEventArgs e)
        {
            for (int i = 0; i <= 100; i++)
            {

                (sender as BackgroundWorker).ReportProgress(i);
                Thread.Sleep(50);
                if (worker.CancellationPending)
                {
                    e.Cancel = true;
                    return;
                }
            }

        }

        void worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            worker = sender as BackgroundWorker;
            worker.RunWorkerCompleted -= new RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);
            worker.DoWork -= new DoWorkEventHandler(worker_DoWork);
            worker.Dispose();
        }

        void worker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            ProgressPercentage.Text = e.ProgressPercentage + "%";
            Progressbarbbtn.Value = e.ProgressPercentage;
            if (e.ProgressPercentage == 100)
            {
                scanMemory_click(sender, e);
            }
        }

        private void ToggleWindow_Click(object sender, RoutedEventArgs e)
        {
            this.Width = Convert.ToDouble(420);
            ToggleLargeWindow.Visibility = Visibility.Visible;
            ToggleWindow.Visibility = Visibility.Hidden;
            this.WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;

        }

        private void ToggleLargeWindow_Click(object sender, RoutedEventArgs e)
        {
            this.Width = Convert.ToDouble(1200);
            ToggleLargeWindow.Visibility = Visibility.Hidden;
            ToggleWindow.Visibility = Visibility.Visible;
            this.WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;
        }

        //private void ReportsPopUp_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        //{
        //    activeGrid = (int)ActiveGrid.Reports;
        //    frame.Navigate(new VirusScanReports());
        //}

        private void Viewdetails_Click(object sender, RoutedEventArgs e)
        {
            activeGrid = (int)ActiveGrid.ScanDetails;
            ScanDetailsGrid.Background = (Brush)bc.ConvertFrom("#0d447a");
            frame.Navigate(new ScanDetails());
        }

        private void RemoveThreats_Click(object sender, RoutedEventArgs e)
        {
            ResultGrid.Visibility = Visibility.Hidden;
            RemovethreatGrid.Visibility = Visibility.Visible;
            donategrid.Visibility = Visibility.Visible;
            Donate.Visibility = Visibility.Hidden;
            Progressbarbbtn.Visibility = Visibility.Visible;
            PleaseWait.Visibility = Visibility.Visible;
            StartOver.Visibility = Visibility.Hidden;

            RemoveThreatMessage.Text = "Removing Threats...";
            worker = new BackgroundWorker();
            worker.WorkerReportsProgress = true;
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);
            worker.DoWork += worker_DoWork;
            worker.ProgressChanged += worker_ThreatRemovalProgressChanged;
            worker.WorkerSupportsCancellation = true;
            worker.RunWorkerAsync();
        }

        void worker_ThreatRemovalProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            ThreatRemovalPercentage.Text = e.ProgressPercentage + "%";
            Progressbarbbtn.Value = e.ProgressPercentage;
            if (e.ProgressPercentage == 100)
            {
                RemoveThreatMessage.Text = "Success!";
                RemoveThreatMessage.Foreground = (Brush)bc.ConvertFrom("#0e763c");
                ThreatRemovalPercentage.Foreground = (Brush)bc.ConvertFrom("#0e763c");
                Progressbarbbtn.Foreground = (Brush)bc.ConvertFrom("#0e763c");
                AfterThreatRemoved(sender, e);
            }
        }

        public void AfterThreatRemoved(object sender, EventArgs e)
        {
            worker = new BackgroundWorker();
            worker.WorkerReportsProgress = true;
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);
            worker.DoWork += worker_DoneWork;
            worker.ProgressChanged += worker_FinishedProgressChanged;
            worker.WorkerSupportsCancellation = true;
            worker.RunWorkerAsync();
        }

        void worker_DoneWork(object sender, DoWorkEventArgs e)
        {
            for (int i = 0; i <= 50; i++)
            {

                (sender as BackgroundWorker).ReportProgress(i);
                Thread.Sleep(100);
                if (worker.CancellationPending && worker.IsBusy)
                {
                    e.Cancel = true;
                    return;
                }
            }
        }
        void worker_FinishedProgressChanged(object sender, ProgressChangedEventArgs e)
        {

            if (e.ProgressPercentage == 20)
            {
                ThreatRemovalPercentage.Visibility = Visibility.Hidden;
                SuccessImage.Visibility = Visibility.Visible;
            }
            else if (e.ProgressPercentage == 50)
            {
                ScanNormalizer(sender, e);
            }
        }


        private void ScanNormalizer(object sender, EventArgs e)
        {
            Progressbarbbtn.Foreground = Brushes.DarkMagenta;
            Progressbarbbtn.Visibility = Visibility.Hidden;
            RemoveThreatMessage.Foreground = (Brush)bc.ConvertFrom("#0d447a");
            RemoveThreatMessage.Visibility = Visibility.Visible;
            ThreatRemovalPercentage.Visibility = Visibility.Visible;
            ThreatRemovalPercentage.Foreground = Brushes.DarkMagenta;
            SuccessImage.Visibility = Visibility.Hidden;
            Donate.Visibility = Visibility.Visible;
            PleaseWait.Visibility = Visibility.Hidden;
            scan.Visibility = Visibility.Visible;
            RemovethreatGrid.Visibility = Visibility.Hidden;
            ThankyouGrid.Visibility = Visibility.Visible;
            ScanFooter.Text = "";
            ScanHeaderMessage.Text = "Checking for updates...";
        }



        private void VirusScanReportView_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            activeGrid = (int)ActiveGrid.Reports;
            frame.Navigate(new VirusScanReports());
        }

        private void JunkWareScanReportsView_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            activeGrid = (int)ActiveGrid.Reports;
            frame.Navigate(new JunkWareScanReports());
        }

        private void BlockedWebsiteReportsView_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            activeGrid = (int)ActiveGrid.Reports;
            frame.Navigate(new BlockedWebsiteReports());
        }

        private void VirusScanReportView_MouseEnter(object sender, MouseEventArgs e)
        {

            VirusreportTab.Background = (Brush)bc.ConvertFrom("#0b355f");
        }

        private void JunkWareScanReportsView_MouseEnter(object sender, MouseEventArgs e)
        {
            JunkwarereportTab.Background = (Brush)bc.ConvertFrom("#0b355f");
        }

        private void BlockedWebsiteReportsView_MouseEnter(object sender, MouseEventArgs e)
        {
            BlockedWebreportTab.Background = (Brush)bc.ConvertFrom("#0b355f");
        }

        private void VirusScanReportView_MouseLeave(object sender, MouseEventArgs e)
        {
            VirusreportTab.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void JunkWareScanReportsView_MouseLeave(object sender, MouseEventArgs e)
        {
            JunkwarereportTab.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void BlockedWebsiteReportsView_MouseLeave(object sender, MouseEventArgs e)
        {
            BlockedWebreportTab.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void ManageUpdateView_MouseEnter(object sender, MouseEventArgs e)
        {
            ManageUpdatesTab.Background = (Brush)bc.ConvertFrom("#0b355f");
        }

        private void ManageUpdateView_MouseLeave(object sender, MouseEventArgs e)
        {
            ManageUpdatesTab.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void CustomizeDisplayView_MouseEnter(object sender, MouseEventArgs e)
        {
            CustomizedDisplayTab.Background = (Brush)bc.ConvertFrom("#0b355f");
        }

        private void CustomizeDisplayView_MouseLeave(object sender, MouseEventArgs e)
        {
            CustomizedDisplayTab.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void RestoreDefaultView_MouseEnter(object sender, MouseEventArgs e)
        {
            RestoreDefaultTab.Background = (Brush)bc.ConvertFrom("#0b355f");
        }

        private void RestoreDefaultView_MouseLeave(object sender, MouseEventArgs e)
        {
            RestoreDefaultTab.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void ImportSettingsView_MouseEnter(object sender, MouseEventArgs e)
        {
            ImportSettingsTab.Background = (Brush)bc.ConvertFrom("#0b355f");
        }

        private void ImportSettingsView_MouseLeave(object sender, MouseEventArgs e)
        {
            ImportSettingsTab.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void ExportSettingsView_MouseEnter(object sender, MouseEventArgs e)
        {
            ExportSettingsTab.Background = (Brush)bc.ConvertFrom("#0b355f");
        }

        private void ExportSettingsView_MouseLeave(object sender, MouseEventArgs e)
        {
            ExportSettingsTab.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void FlushDNS_MouseEnter(object sender, MouseEventArgs e)
        {
            FlushDNSTab.Background = (Brush)bc.ConvertFrom("#0b355f");
        }

        private void FlushDNS_MouseLeave(object sender, MouseEventArgs e)
        {
            FlushDNSTab.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void RemoveJunk_MouseEnter(object sender, MouseEventArgs e)
        {
            RemoveJunkTab.Background = (Brush)bc.ConvertFrom("#0b355f");
        }

        private void RemoveJunk_MouseLeave(object sender, MouseEventArgs e)
        {
            RemoveJunkTab.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void BlockWeb_MouseEnter(object sender, MouseEventArgs e)
        {
            BlockWebTab.Background = (Brush)bc.ConvertFrom("#0b355f");
        }

        private void BlockWeb_MouseLeave(object sender, MouseEventArgs e)
        {
            BlockWebTab.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void ManuallyAllow_MouseEnter(object sender, MouseEventArgs e)
        {
            ManuallyAllowTab.Background = (Brush)bc.ConvertFrom("#0b355f");
        }

        private void ManuallyAllow_MouseLeave(object sender, MouseEventArgs e)
        {
            ManuallyAllowTab.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void ManuallyDisallow_MouseEnter(object sender, MouseEventArgs e)
        {
            ManuallyDisallowTab.Background = (Brush)bc.ConvertFrom("#0b355f");
        }

        private void ManuallyDisallow_MouseLeave(object sender, MouseEventArgs e)
        {
            ManuallyDisallowTab.Background = (Brush)bc.ConvertFrom("#0d447a");
        }

        private void ManuallyAllow_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            frame.Navigate(new MannuallyAllow());
        }

        private void FlushDNSTab_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {

            FlushDNSPopUp.IsOpen = true;
            RemoveJunkwarePopUp.IsOpen = false;
            RestoreSettingPopUp.IsOpen = false;
        }

        private void FlushDNSCancel_Click(object sender, RoutedEventArgs e)
        {
            FlushDNSPopUp.IsOpen = false;
        }

        private void FlushDNSContinue_Click(object sender, RoutedEventArgs e)
        {
            FlushDNSPopUp.IsOpen = false;
        }

        private void RemoveJunkTab_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            FlushDNSPopUp.IsOpen = false;
            RemoveJunkwarePopUp.IsOpen = true;
            RestoreSettingPopUp.IsOpen = false;
        }

        private void RemoveJunkwareCancel_Click(object sender, RoutedEventArgs e)
        {
            RemoveJunkwarePopUp.IsOpen = false;
        }

        private void RemoveJunkwareContinue_Click(object sender, RoutedEventArgs e)
        {
            RemoveJunkwarePopUp.IsOpen = false;
        }

        private void RestoreDefaultTab_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            RestoreSettingPopUp.IsOpen = true;
            FlushDNSPopUp.IsOpen = false;
            RemoveJunkwarePopUp.IsOpen = false;
        }
        private void RestoreSettingCancel_Click(object sender, RoutedEventArgs e)
        {
            RestoreSettingPopUp.IsOpen = false;
        }

        private void RestoreSettingContinue_Click(object sender, RoutedEventArgs e)
        {
            RestoreSettingPopUp.IsOpen = false;
        }

        private void BlockWebTab_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            frame.Navigate(new BlockWebsites());
        }

        private void ManuallyDisallowTab_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            frame.Navigate(new ManuallyDisallow());
        }

        private void ManageUpdatesTab_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            frame.Navigate(new ManageUpdates());
        }

        private void CustomizedDisplayTab_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            frame.Navigate(new CustomizeDisplay());
        }

        private void ImportSettingsTab_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            frame.Navigate(new ImportSettings());
        }

        private void ExportSettingsTab_PreviewMouseDown(object sender, MouseButtonEventArgs e)
        {
            frame.Navigate(new ExportSettings());
        }
    }
}
