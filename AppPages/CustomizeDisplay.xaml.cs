using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MalwareSecurity.Models;

namespace MalwareSecurity.AppPages
{
    /// <summary>
    /// Interaction logic for CustomizeDisplay.xaml
    /// </summary>
    public partial class CustomizeDisplay : Page
    {
        List<ColorModel> colorlist;
        public CustomizeDisplay()
        {
            InitializeComponent();
            colorlist = new List<ColorModel>();
            bindSystemColors();
        }

        private void ChooseBackground_Click(object sender, RoutedEventArgs e)
        {
            var fileDialog = new Microsoft.Win32.OpenFileDialog() { Filter = "JPEG Files (*.jpeg)|*.jpeg|PNG Files (*.png)|*.png|JPG Files (*.jpg)|*.jpg|GIF Files (*.gif)|*.gif" };
           var result= fileDialog.ShowDialog();
            if (result == true)
            {
                
                string fullpath = fileDialog.InitialDirectory + fileDialog.FileName;

                ImageBrush myBrush = new ImageBrush();
                Image image = new Image();
                image.Source = new BitmapImage(
                    new Uri(
                       fullpath));
                myBrush.ImageSource = image.Source;
                DisplaySettings.Background = Brushes.Transparent;
                CustomizeDisplayPanel.Background = myBrush;
            }
        }

        private void BackGroundA_Click(object sender, RoutedEventArgs e)
        {
            var check = (sender as RadioButton);
            if(check.IsChecked==true)
            {
                DisplaySettings.Background = Brushes.White;
                CustomizeDisplayPanel.Background = null;
            }

        }

        private void BackGroundB_Click(object sender, RoutedEventArgs e)
        {
            var check = (sender as RadioButton);
            if (check.IsChecked == true)
            {
                ImageBrush myBrush = new ImageBrush();
                Image image = new Image();
                image.Source = new BitmapImage(new Uri(@"..\..\assests\Back1.jpg", UriKind.Relative));
                myBrush.ImageSource = image.Source;
                DisplaySettings.Background = Brushes.Transparent;
                CustomizeDisplayPanel.Background = myBrush;
            }
        }

        private void BackgroundC_Click(object sender, RoutedEventArgs e)
        {
            var check = (sender as RadioButton);
            if (check.IsChecked == true)
            {
                ImageBrush myBrush = new ImageBrush();
                Image image = new Image();
                image.Source = new BitmapImage(new Uri(@"..\..\assests\Back2.jpg", UriKind.Relative));
                myBrush.ImageSource = image.Source;
                DisplaySettings.Background = Brushes.Transparent;
                CustomizeDisplayPanel.Background = myBrush;
            }
        }

        private void BackgroundD_Click(object sender, RoutedEventArgs e)
        {
            var check = (sender as RadioButton);
            if (check.IsChecked == true)
            {
                ImageBrush myBrush = new ImageBrush();
                Image image = new Image();
                image.Source = new BitmapImage(new Uri(@"..\..\assests\Back3.jpg", UriKind.Relative));
                myBrush.ImageSource = image.Source;
                DisplaySettings.Background = Brushes.Transparent;
                CustomizeDisplayPanel.Background = myBrush;
            }
        }

        public void bindSystemColors()
        {
            System.Drawing.Color MyColor;
            foreach (string ColorName in System.Enum.GetNames(typeof(System.Drawing.KnownColor)))
            {
                MyColor = System.Drawing.Color.FromName(ColorName);
                if (MyColor.IsSystemColor == true)
                {
                    ColorModel model = new ColorModel();
                    model.Name = ColorName;
                    
                }
                
            }
        }
    }
}
